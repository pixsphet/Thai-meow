const mongoose = require('mongoose');
const dotenv = require('dotenv');

// Load environment variables
dotenv.config();

// Import models
const Vocabulary = require('./models/Vocabulary');
const Lesson = require('./models/Lesson');
const UserProgress = require('./models/UserProgress');
const GameResult = require('./models/GameResult');

const seedAtlas = async () => {
  try {
    console.log('üå± Seeding MongoDB Atlas with sample data...');
    
    const mongoURI = process.env.MONGODB_URI;
    
    if (!mongoURI) {
      console.error('‚ùå MONGODB_URI not found in environment variables');
      console.log('Please create a .env file with your MongoDB Atlas connection string');
      return;
    }
    
    console.log('üì° Connecting to MongoDB Atlas...');
    
    const conn = await mongoose.connect(mongoURI, {
      maxPoolSize: 10,
      serverSelectionTimeoutMS: 5000,
      socketTimeoutMS: 45000,
    });
    
    console.log('‚úÖ Connected to MongoDB Atlas!');
    
    // Clear existing data
    console.log('üßπ Clearing existing data...');
    await Vocabulary.deleteMany({});
    await Lesson.deleteMany({});
    await UserProgress.deleteMany({});
    await GameResult.deleteMany({});
    
    // Sample vocabulary data
    const sampleVocabularies = [
      {
        word: '‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ',
        thai_word: '‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ',
        meaning: 'Hello',
        pronunciation: 's√†-w√†t-dii',
        category: 'greetings',
        lesson_id: 1,
        audioText: '‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ',
        image: 'üëã',
        examples: ['‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö', '‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡πà‡∏∞'],
        difficulty: 'beginner'
      },
      {
        word: '‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì',
        thai_word: '‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì',
        meaning: 'Thank you',
        pronunciation: 'k…îÃÄ…îp-kun',
        category: 'greetings',
        lesson_id: 1,
        audioText: '‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì',
        image: 'üôè',
        examples: ['‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏£‡∏±‡∏ö', '‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡πà‡∏∞'],
        difficulty: 'beginner'
      },
      {
        word: '‡∏ô‡πâ‡∏≥',
        thai_word: '‡∏ô‡πâ‡∏≥',
        meaning: 'Water',
        pronunciation: 'n√°am',
        category: 'basic',
        lesson_id: 2,
        audioText: '‡∏ô‡πâ‡∏≥',
        image: 'üíß',
        examples: ['‡∏ô‡πâ‡∏≥‡∏î‡∏∑‡πà‡∏°', '‡∏ô‡πâ‡∏≥‡πÉ‡∏™'],
        difficulty: 'beginner'
      },
      {
        word: '‡∏≠‡∏≤‡∏´‡∏≤‡∏£',
        thai_word: '‡∏≠‡∏≤‡∏´‡∏≤‡∏£',
        meaning: 'Food',
        pronunciation: 'aa-h«éan',
        category: 'basic',
        lesson_id: 2,
        audioText: '‡∏≠‡∏≤‡∏´‡∏≤‡∏£',
        image: 'üçΩÔ∏è',
        examples: ['‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÑ‡∏ó‡∏¢', '‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏≠‡∏£‡πà‡∏≠‡∏¢'],
        difficulty: 'beginner'
      },
      {
        word: '‡∏ö‡πâ‡∏≤‡∏ô',
        thai_word: '‡∏ö‡πâ‡∏≤‡∏ô',
        meaning: 'House',
        pronunciation: 'b√¢an',
        category: 'basic',
        lesson_id: 2,
        audioText: '‡∏ö‡πâ‡∏≤‡∏ô',
        image: 'üè†',
        examples: ['‡∏ö‡πâ‡∏≤‡∏ô‡πÉ‡∏´‡∏ç‡πà', '‡∏ö‡πâ‡∏≤‡∏ô‡∏™‡∏ß‡∏¢'],
        difficulty: 'beginner'
      }
    ];
    
    // Sample lesson data
    const sampleLessons = [
      {
        lesson_id: 1,
        title: 'Thai Greetings',
        description: 'Learn basic Thai greetings',
        level: 'Beginner',
        category: 'greetings',
        order: 1,
        total_questions: 5,
        estimated_time: 10
      },
      {
        lesson_id: 2,
        title: 'Basic Thai Words',
        description: 'Learn basic Thai vocabulary',
        level: 'Beginner',
        category: 'basic',
        order: 2,
        total_questions: 10,
        estimated_time: 15
      },
      {
        lesson_id: 3,
        title: 'Intermediate Thai',
        description: 'Learn intermediate Thai vocabulary',
        level: 'Intermediate',
        category: 'dialogue',
        order: 1,
        total_questions: 8,
        estimated_time: 20
      },
      {
        lesson_id: 4,
        title: 'Advanced Thai',
        description: 'Learn advanced Thai vocabulary',
        level: 'Advanced',
        category: 'dialogue',
        order: 1,
        total_questions: 12,
        estimated_time: 25
      }
    ];
    
    // Insert sample data
    console.log('üìö Inserting sample vocabularies...');
    await Vocabulary.insertMany(sampleVocabularies);
    console.log(`‚úÖ Inserted ${sampleVocabularies.length} vocabularies`);
    
    console.log('üìñ Inserting sample lessons...');
    for (const lesson of sampleLessons) {
      await Lesson.findOneAndUpdate(
        { lesson_id: lesson.lesson_id },
        lesson,
        { upsert: true, new: true }
      );
    }
    console.log(`‚úÖ Inserted ${sampleLessons.length} lessons`);
    
    // Create indexes
    console.log('üìä Creating indexes...');
    try {
      await Vocabulary.collection.createIndex({ word: 1 });
      await Vocabulary.collection.createIndex({ lesson_id: 1 });
      await Vocabulary.collection.createIndex({ category: 1 });
      
      await Lesson.collection.createIndex({ lesson_id: 1 });
      await Lesson.collection.createIndex({ level: 1 });
      await Lesson.collection.createIndex({ category: 1 });
      
      console.log('‚úÖ Indexes created successfully!');
    } catch (error) {
      console.log('‚ö†Ô∏è Some indexes already exist, continuing...');
    }
    
    // Verify data
    const vocabCount = await Vocabulary.countDocuments();
    const lessonCount = await Lesson.countDocuments();
    
    console.log('üìä Database statistics:');
    console.log(`   - Vocabularies: ${vocabCount}`);
    console.log(`   - Lessons: ${lessonCount}`);
    
    console.log('üéâ MongoDB Atlas seeded successfully!');
    console.log('üìã You can now test your API endpoints:');
    console.log('   - GET /api/vocabulary');
    console.log('   - GET /api/games');
    console.log('   - GET /api/arrange-sentence');
    
  } catch (error) {
    console.error('‚ùå Seeding failed:', error.message);
    
    if (error.message.includes('authentication failed')) {
      console.error('üîê Authentication failed. Please check your username and password.');
    } else if (error.message.includes('network')) {
      console.error('üåê Network error. Please check your internet connection and IP whitelist.');
    } else if (error.message.includes('timeout')) {
      console.error('‚è∞ Connection timeout. Please check your connection string and network.');
    } else {
      console.error('üîç Unknown error. Please check your connection string format.');
    }
    
  } finally {
    await mongoose.disconnect();
    console.log('üîå Disconnected from MongoDB Atlas');
    process.exit(0);
  }
};

// Run seeding
seedAtlas();
