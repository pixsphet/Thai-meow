import AsyncStorage from '@react-native-async-storage/async-storage';

/**
 * Vocabulary Service
 * ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏®‡∏±‡∏û‡∏ó‡πå‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ
 */
class VocabularyService {
  constructor() {
    this.storageKey = 'user_vocabulary';
    this.learnedKey = 'learned_vocabulary';
    this.masteredKey = 'mastered_vocabulary';
    this.difficultKey = 'difficult_vocabulary';
  }

  /**
   * ‡∏î‡∏∂‡∏á‡∏Ñ‡∏≥‡∏®‡∏±‡∏û‡∏ó‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡πÅ‡∏•‡πâ‡∏ß
   */
  async getLearnedVocabulary(userId = 'default') {
    try {
      const localData = await AsyncStorage.getItem(this.learnedKey);
      if (localData) {
        return JSON.parse(localData);
      }
      
      // Mock data
      return this.getMockLearnedVocabulary();
    } catch (error) {
      console.error('‚ùå Error getting learned vocabulary:', error);
      return [];
    }
  }

  // Mock data removed - using MongoDB Atlas data instead

  /**
   * ‡∏î‡∏∂‡∏á‡∏Ñ‡∏≥‡∏®‡∏±‡∏û‡∏ó‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡πÅ‡∏•‡πâ‡∏ß
   */
  async getMasteredVocabulary(userId = 'default') {
    try {
      const localData = await AsyncStorage.getItem(this.masteredKey);
      if (localData) {
        return JSON.parse(localData);
      }
      return [];
    } catch (error) {
      console.error('‚ùå Error getting mastered vocabulary:', error);
      return [];
    }
  }

  /**
   * ‡∏î‡∏∂‡∏á‡∏Ñ‡∏≥‡∏®‡∏±‡∏û‡∏ó‡πå‡∏ó‡∏µ‡πà‡∏¢‡∏≤‡∏Å
   */
  async getDifficultVocabulary(userId = 'default') {
    try {
      const localData = await AsyncStorage.getItem(this.difficultKey);
      if (localData) {
        return JSON.parse(localData);
      }
      return [];
    } catch (error) {
      console.error('‚ùå Error getting difficult vocabulary:', error);
      return [];
    }
  }

  /**
   * ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏Ñ‡∏≥‡∏®‡∏±‡∏û‡∏ó‡πå
   */
  async updateVocabularyProgress(vocabularyId, progressData) {
    try {
      console.log('üìù Updating vocabulary progress:', vocabularyId, progressData);
      return { success: true };
    } catch (error) {
      console.error('‚ùå Error updating vocabulary progress:', error);
      throw error;
    }
  }

  /**
   * ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç
   */
  async markAsMastered(vocabularyId) {
    try {
      console.log('üèÜ Marking as mastered:', vocabularyId);
      return { success: true };
    } catch (error) {
      console.error('‚ùå Error marking as mastered:', error);
      throw error;
    }
  }

  /**
   * ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏¢‡∏≤‡∏Å
   */
  async markAsDifficult(vocabularyId) {
    try {
      console.log('‚ö†Ô∏è Marking as difficult:', vocabularyId);
      return { success: true };
    } catch (error) {
      console.error('‚ùå Error marking as difficult:', error);
      throw error;
    }
  }
}

// Export singleton instance
export default new VocabularyService();
